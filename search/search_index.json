{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>.NET Core command-line (CLI) tool to generate Entity Framework Core source files.</p>"},{"location":"#install","title":"Install","text":"<p>The Entity Framework Core Generator tool is available on nuget.org via package name <code>EntityFrameworkCore.Generator</code>.</p> <p>To install EntityFrameworkCore.Generator, run the following command in the console</p> <pre><code>dotnet tool install --global EntityFrameworkCore.Generator\n</code></pre> <p>More information about NuGet package available at https://nuget.org/packages/EntityFrameworkCore.Generator</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Entity Framework Core database first model generation</li> <li>Safe regeneration via region replacement</li> <li>Safe Renaming via mapping file parsing</li> <li>Optionally generate read, create and update models from entity</li> <li>Optionally generate validation and object mapper classes</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>To generate source code files from your database, use the generate command with your connection string.</p> <pre><code>efg generate -c &lt;ConnectionString&gt;\n</code></pre>"},{"location":"commands/","title":"Command Line Reference","text":"<p>Entity Framework Core Generator has the following commands</p>"},{"location":"commands/#initialize-command","title":"Initialize Command","text":"<p>The <code>initialize</code> command is used to create the configuration yaml file and optionally set the connection string. The configuration file has many options to configure the generated output.  See the configuration file documentation for more details.</p> <pre><code>Usage: efg initialize [options]\n\nOptions:\n  --help                   Show help information\n  -p &lt;Provider&gt;            Database provider to reverse engineer\n  -c &lt;ConnectionString&gt;    Database connection string to reverse engineer\n  --id &lt;UserSecretsId&gt;     The user secret ID to use.\n  --name &lt;ConnectionName&gt;  The user secret configuration name.\n  -d &lt;directory&gt;           The root working directory\n  -f &lt;file&gt;                The options file name\n\nExample:\n\nefg initialize initialize -c \"Data Source=(local);Initial Catalog=Tracker;Integrated Security=True\"\n</code></pre>"},{"location":"commands/#generate-command","title":"Generate Command","text":"<p>The <code>generate</code> command creates source code files from a database schema.  Running the command without any options will generate based on the configuration yaml file settings. Options pass via command line override values in the configuration yaml file.</p> <pre><code>Usage: efg generate [options]\n\nOptions:\n  --help                 Show help information\n  -p &lt;Provider&gt;          Database provider to reverse engineer\n  -c &lt;ConnectionString&gt;  Database connection string to reverse engineer\n  --extensions           Include query extensions in generation\n  --models               Include view models in generation\n  --mapper               Include object mapper in generation\n  --validator            Include model validation in generation\n  -d &lt;directory&gt;         The root working directory\n  -f &lt;file&gt;              The options file name\n\nExample:\n\nefg generate\n</code></pre>"},{"location":"configuration/","title":"Configuration File","text":"<p>The configuration yaml file controls various settings on how the source files are generated. The default configuration file name is <code>generation.yml</code>.</p>"},{"location":"configuration/#variables","title":"Variables","text":"<p>The configuration file support self referencing variables. Variables are case insensitive. See reference below for usage.</p>"},{"location":"configuration/#reference","title":"Reference","text":"<pre><code>#---------------------------------#\n# project section -  Used for shared variables through out the configuration file\n#---------------------------------#\nproject:\n  # the root namespace for the project\n  namespace: 'Company.{Database.Name}'\n  # the root directory for the project\n  directory: .\\\n  # output should support nullable reference types\n  nullable: true\n  # use file scoped namespaces\n  fileScopedNamespace: true\n#---------------------------------#\n# data section -  Used for configuring database connections\n#---------------------------------#\ndatabase:\n  # the connection string to the database\n  connectionString: 'Data Source=(local);Initial Catalog=Tracker;Integrated Security=True'\n  # the database provider name.  Default: SqlServer\n  provider: SqlServer|PostgreSQL|MySQL|Sqlite\n\n  # config name to read the connection string from the user secrets file\n  connectionName: 'ConnectionStrings:Generator'\n  # the user secret identifier, can be shared with .net core project\n  userSecretsId: '984ef0cf-2b22-4fd1-876d-e01499da4c1f'\n\n  # tables to include or empty to include all\n  tables:\n    - Priority\n    - Status\n    - Task\n    - User\n\n  # schemas to include or empty to include all\n  schemas:\n    - dbo\n\n  # list of expressions for tables to exclude, source is Schema.TableName\n  exclude:\n    - exact: dbo.SchemaVersions\n    - regex: dbo\\.SchemaVersions$\n\n  # table naming hint for how existing tables are named.  Default: Singular\n  tableNaming: Mixed|Plural|Singular\n\n#---------------------------------#\n# data section - controls the generated files for Entity Framework\n#---------------------------------#\ndata:\n  # data context file configuration\n  context:\n    name: '{Database.Name}Context'          # the data context class name\n    baseClass: DbContext                    # the data context base class name\n    namespace: '{Project.Namespace}.Data'   # the data context namespace\n    directory: '{Project.Directory}\\Data'   # the data context output directory\n\n    # how to generate names for the DbSet properties on the data context.  Default: Plural\n    propertyNaming: Preserve|Plural|Suffix\n    #include XML documentation\n    document: false\n\n  # entity class file configuration\n  entity:\n    namespace: '{Project.Namespace}.Data.Entities'  # the entity class namespace\n    directory: '{Project.Directory}\\Data\\Entities'  # the entity class output directory\n\n    # how to generate entity class names from the table name.  Default: Singular\n    entityNaming: Preserve|Plural|Singular\n\n    # how to generate relationship collections names for the entity.  Default: Plural\n    relationshipNaming: Preserve|Plural|Suffix\n    #include XML documentation\n    document: false\n\n    # Generate class names with prefixed schema name eg. dbo.MyTable = DboMyTable\n    prefixWithSchemaName: false\n\n    # Rename entities and properties with regular expressions\n    renaming:\n      # list of regular expressions to clean entity names\n      entities:\n        - ^(sp|tbl|udf|vw)_\n\n      # list of regular expressions to clean property names\n      properties:\n        - ^{Table.Name}(?=Id|Name)\n\n  # mapping class file configuration\n  mapping:\n    namespace: '{Project.Namespace}.Data.Mapping'   # the mapping class namespace\n    directory: '{Project.Directory}\\Data\\Mapping'   # the mapping class output directory\n    #include XML documentation\n    document: false\n\n    temporal: false                                 # if temporal table mapping is enabled. Default true\n    rowVersion: ByteArray|Long|ULong                # How row versions should be mapped. Default ByteArray\n\n  # query extension class file configuration\n  query:\n    generate: true          # generate query extension class files\n    indexPrefix: By         # Prefix for queries built from an index\n    uniquePrefix: GetBy     # Prefix for queries built from unique indexes\n    namespace: '{Project.Namespace}.Data.Queries'   # the mapping class namespace\n    directory: '{Project.Directory}\\Data\\Queries'   # the mapping class output directory\n    #include XML documentation\n    document: false\n\n#---------------------------------#\n# model section - controls the optional view model generation\n#---------------------------------#\nmodel:\n  # shared options between read, create and update models\n  shared:\n    namespace: '{Project.Namespace}.Domain.Models' # the model class namespace\n    directory: '{Project.Directory}\\Domain\\Models' # the mapping class output directory\n    # regular expression of entities and properties to exclude in all models\n    exclude:\n      # list of regular expressions of entity names\n      entities:\n        - 'EmailDelivery'\n        - 'UserLogin'\n\n      # list of regular expressions of property names, source is Entity.Property\n      properties:\n        - 'User\\.PasswordHash$'\n        - 'User\\.ResetHash$'\n\n  # read view model class configuration\n  read:\n    generate: true                  # generate read model class files\n    name: '{Entity.Name}ReadModel'  # the read model class name\n    baseClass: EntityReadModel      # the read model base class\n    namespace: '{Project.Namespace}.Domain.Models'\n    directory: '{Project.Directory}\\Domain\\Models'\n    exclude:\n      entities: []\n      properties: []\n\n  # create view model class configuration\n  create:\n    generate: true                      # generate create model class files\n    name: '{Entity.Name}CreateModel'    # the create model class name\n    baseClass: EntityCreateModel        # the create model base class\n    namespace: '{Project.Namespace}.Domain.Models'\n    directory: '{Project.Directory}\\Domain\\Models'\n    exclude:\n      entities: []\n      properties: []\n\n  # update view model class configuration\n  update:\n    generate: true                      # generate update model class files\n    name: '{Entity.Name}UpdateModel'    # the update model class name\n    baseClass: EntityUpdateModel        # the update model base class\n    namespace: '{Project.Namespace}.Domain.Models'\n    directory: '{Project.Directory}\\Domain\\Models'\n    exclude:\n      entities: []\n      properties: []\n\n  # AutoMapper class configuration\n  mapper:\n    generate: true\n    name: '{Entity.Name}Profile'\n    baseClass: Profile\n    namespace: '{Project.Namespace}.Domain.Mapping'\n    directory: '{Project.Directory}\\Domain\\Mapping'\n\n  # FluentValidation class configuration\n  validator:\n    generate: true\n    name: '{Model.Name}Validator'\n    baseClass: 'AbstractValidator&lt;{Model.Name}&gt;'\n    namespace: '{Project.Namespace}.Domain.Validation'\n    directory: '{Project.Directory}\\Domain\\Validation'\n# script templates\nscript:\n  # collection script template with EntityContext as a variable\n  context:  \n    - templatePath: '.\\templates\\context.csx'          # path to script file\n      fileName: 'ContextScript.cs'                     # filename to save script output\n      directory: '{Project.Directory}\\Domain\\Context'  # directory to save script output\n      namespace: '{Project.Namespace}.Domain.Context'  \n      baseClass: ContextScriptBase\n      overwrite: true                                  # overwrite existing file\n      merge: true                                      # merge regions with existing file\n  # collection of script template with current Entity as a variable\n  entity:\n    - templatePath: '.\\templates\\entity.csx'           # path to script file\n      fileName: '{Entity.Name}Script.cs'               # filename to save script output\n      directory: '{Project.Directory}\\Domain\\Entity'   # directory to save script output\n      namespace: '{Project.Namespace}.Domain.Entity'  \n      baseClass: EntityScriptBase\n      overwrite: true                                  # overwrite existing file\n      merge: true                                      # merge regions with existing file\n  # collection script template with current Model as a variable\n  model:\n    - templatePath: '.\\templates\\model.csx'            # path to script file\n      fileName: '{Model.Name}Script.cs'                # filename to save script output\n      directory: '{Project.Directory}\\Domain\\Models'   # directory to save script output\n      namespace: '{Project.Namespace}.Domain.Models'  \n      baseClass: ModelScriptBase\n      overwrite: true                                  # overwrite existing file\n      merge: true                                      # merge regions with existing file\n    - templatePath: '.\\templates\\sample.csx'           # path to script file\n      fileName: '{Model.Name}Sample.cs'                # filename to save script output\n      directory: '{Project.Directory}\\Domain\\Models'   # directory to save script output\n      namespace: '{Project.Namespace}.Domain.Models'  \n      baseClass: ModelSampleBase\n      overwrite: true                                  # overwrite existing file\n      merge: true                                      # merge regions with existing file\n</code></pre>"},{"location":"connectionString/","title":"Database Connection","text":"<p>Entity Framework Core Generator tool supports several different ways to connect to the database.</p>"},{"location":"connectionString/#command-line-connection-string","title":"Command Line Connection String","text":"<p>The database connection string can be passed in via command line using the <code>-c &lt;ConnectionString&gt;</code> argument.  Using the command line argument overrides all other connection strings.</p>"},{"location":"connectionString/#configuration-yaml-file","title":"Configuration Yaml file","text":"<p>The connection string can be stored in the configuration yaml file under the <code>database/connectionString</code> section.</p> <pre><code>database:\n  connectionString: 'Data Source=(local);Initial Catalog=Tracker;Integrated Security=True'\n</code></pre> <p>Use the the <code>database/connectionString</code> configuration with caution.  You don't want to have a database user name and password stored in clear text when its committed to source control.</p>"},{"location":"connectionString/#user-secret-manager","title":"User Secret Manager","text":"<p>Entity Framework Core Generator supports reading the connection string from the user secrets file.  The Secret Manager tool stores sensitive data in the user secrets file. User secrets are stored in a separate location from the project tree. The user secrets are associated with a specific user secret identifier. The user secrets aren't checked into source control.</p> <p>Create a user secret with the <code>efg initialize</code> command.  The command will create a configuration yaml file if it doesn't exist, then it will update the user secret file with the supplied connection.  Finally it will update the configuration yaml with a <code>connectionName</code> and <code>userSecretsId</code> if they aren't set.</p> <pre><code>efg initialize -c &lt;ConnectionString&gt;\n</code></pre> <p>To configure how Entity Framework Core Generator reads the user secret file, set the following in the configuration yaml file.</p> <pre><code>database:\n  connectionName: 'ConnectionStrings:Generator'\n  userSecretsId: '984ef0cf-2b22-4fd1-876d-e01499da4c1f'\n</code></pre> <p>The connection string can also be store in the user secret file using the .NET Core <code>dotnet-user-secrets</code> nuget tool.</p> <pre><code>dotnet user-secrets set \"ConnectionStrings:Generator\" \"Data Source=(local);Initial Catalog=Tracker;Integrated Security=True\" --id \"984ef0cf-2b22-4fd1-876d-e01499da4c1f\"\n</code></pre> <p>The <code>userSecretsId</code> can be shared with your .NET Core Project.</p> <pre><code>&lt;PropertyGroup&gt;\n  &lt;TargetFramework&gt;netcoreapp2.1&lt;/TargetFramework&gt;\n  &lt;UserSecretsId&gt;984ef0cf-2b22-4fd1-876d-e01499da4c1f&lt;/UserSecretsId&gt;\n&lt;/PropertyGroup&gt;\n</code></pre> <p>Read more about user secrets in the ASP.NET Core documentation</p> <p>Secret Manager</p>"},{"location":"providers/","title":"Database Providers","text":"<p>Entity Framework Core Generator (efg) supports the following databases.</p> <ul> <li>SQL Server</li> <li>PostgreSQL</li> <li>MySQL</li> <li>Sqlite</li> </ul>"},{"location":"providers/#database-schema","title":"Database Schema","text":"<p>The database schema is loaded from the Entity Framework Core database metadata model factory implementation of <code>IDatabaseModelFactory</code>.  Entity Framework Core Generator used the the implemented interface from each of the supported providers similar to how <code>ef dbcontext scaffold</code> works.</p>"},{"location":"providers/#usage","title":"Usage","text":"<p>The provider can be set via command line or via the configuration file.</p> <p>Set via command line</p> <pre><code>efg generate -c &lt;ConnectionString&gt; -p &lt;Provider&gt;\n</code></pre> <p>Set in configuration file</p> <pre><code>database:\n  connectionString: 'Data Source=(local);Initial Catalog=Tracker;Integrated Security=True'\n  provider: SqlServer\n</code></pre>"},{"location":"quickStart/","title":"Quick Start","text":""},{"location":"quickStart/#installation","title":"Installation","text":"<p>To install EntityFrameworkCore.Generator tool, run the following command in the console</p> <pre><code>dotnet tool install --global EntityFrameworkCore.Generator\n</code></pre> <p>After the tool has been install, the <code>efg</code> command line will be available.  Run <code>efg --help</code> for command line options</p>"},{"location":"quickStart/#generate-command","title":"Generate Command","text":"<p>Entity Framework Core Generator (efg) creates source code files from a database schema. To generate the files with no configuration, run the following</p> <pre><code>efg generate -c &lt;ConnectionString&gt;\n</code></pre> <p>Replace <code>&lt;ConnectionString&gt;</code> with a valid database connection string.</p>"},{"location":"quickStart/#generation-output","title":"Generation Output","text":"<p>The <code>generate</code> command will create the follow files and directory structure by default.  The root directory defaults to the current working directory.  Most of the output names and locations can be customized in the configuration file</p>"},{"location":"quickStart/#data-context-output","title":"Data Context Output","text":"<p>The EntityFramework DbContext file will be created in the root directory.</p>"},{"location":"quickStart/#entities-output","title":"Entities Output","text":"<p>The entities directory will contain the generated source file for entity class representing each table.</p>"},{"location":"quickStart/#mapping-output","title":"Mapping Output","text":"<p>The mapping directory contains a fluent mapping class to map each entity to its table.</p>"},{"location":"quickStart/#initialize-command","title":"Initialize Command","text":"<p>The <code>initialize</code> command is used to create the configuration yaml file and optionally set the connection string. The configuration file has many options to configure the generated output.  See the configuration file documentation for more details.</p> <p>The following command will create an initial <code>generation.yaml</code> configuration file as well as setting a user secret to store the connection string.</p> <pre><code>efg initialize -c &lt;ConnectionString&gt;\n</code></pre> <p>When a <code>generation.yaml</code> configuration file exists, you can run <code>efg generate</code> in the same directory to generate the source using that configuration file.</p>"},{"location":"quickStart/#regeneration","title":"Regeneration","text":"<p>Entity Framework Core Generator supports safe regeneration via region replacement and source code parsing.  A typical workflow for a project requires many database changes and updates.  Being able to regenerate the entities and associated files is a huge time saver.</p>"},{"location":"quickStart/#region-replacement","title":"Region Replacement","text":"<p>All the templates output a region on first generation.  On future regeneration, only the regions are replaced.  This keeps any other changes you've made to the source file.</p> <p>Example of a generated entity class</p> <pre><code>public partial class Status\n{\n    public Status()\n    {\n        #region Generated Constructor\n        Tasks = new HashSet&lt;Task&gt;();\n        #endregion\n    }\n\n    #region Generated Properties\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n\n    public string Description { get; set; }\n\n    public int DisplayOrder { get; set; }\n\n    public bool IsActive { get; set; }\n\n    public DateTimeOffset Created { get; set; }\n\n    public string CreatedBy { get; set; }\n\n    public DateTimeOffset Updated { get; set; }\n\n    public string UpdatedBy { get; set; }\n\n    public Byte[] RowVersion { get; set; }\n    #endregion\n\n    #region Generated Relationships\n    public virtual ICollection&lt;Task&gt; Tasks { get; set; }\n    #endregion\n}\n</code></pre> <p>When the <code>generate</code> command is re-run, the <code>Generated Constructor</code>, <code>Generated Properties</code> and <code>Generated Relationships</code> regions will be replace with the current output of the template.  Any other changes outside those regions will be safe.</p>"},{"location":"quickStart/#source-parsing","title":"Source Parsing","text":"<p>In order to capture and preserve Entity, Property and DbContext renames, the <code>generate</code> command parses any existing mapping and DbContext class to capture how things are named.  This allows you to use the full extend of Visual Studio's refactoring tools to rename things as you like.  Then, when regenerating, those changes won't be lost.</p>"},{"location":"quickStart/#database-providers","title":"Database Providers","text":"<p>Entity Framework Core Generator supports the following databases.</p> <ul> <li>SQL Server</li> <li>PostgreSQL</li> <li>MySQL</li> <li>Sqlite</li> </ul> <p>The provider can be set via command line or via the configuration file.</p> <p>Set via command line</p> <pre><code>efg generate -c &lt;ConnectionString&gt; -p &lt;Provider&gt;\n</code></pre> <p>Set in configuration file</p> <pre><code>database:\n  connectionString: 'Data Source=(local);Initial Catalog=Tracker;Integrated Security=True'\n  provider: SqlServer\n</code></pre>"},{"location":"quickStart/#database-schema","title":"Database Schema","text":"<p>The database schema is loaded from the metadata model factory implementation of <code>IDatabaseModelFactory</code>.  Entity Framework Core Generator uses the implemented interface from each of the supported providers similar to how <code>ef dbcontext scaffold</code> works.</p>"},{"location":"quickStart/#view-models","title":"View Models","text":"<p>Entity Framework Core Generator supports generating Read, Create and Update view models from an entity.  Many projects rely on view models to shape data.  The model templates can be used to quickly get the basic view models created.  The model templates also support regeneration so any database change can easily be sync'd to the view models.  </p>"},{"location":"readme/","title":"Overview","text":"<p>.NET Core command-line (CLI) tool to generate Entity Framework Core model from an existing database.</p>"},{"location":"readme/#features","title":"Features","text":"<ul> <li>Entity Framework Core database first model generation</li> <li>Safe regeneration via region replacement</li> <li>Safe Renaming via mapping file parsing</li> <li>Optionally generate read, create and update models from entity</li> <li>Optionally generate validation and object mapper classes</li> </ul>"},{"location":"readme/#documentation","title":"Documentation","text":"<p>Entity Framework Core Generator documentation is available via Read the Docs</p>"},{"location":"readme/#initialize-command","title":"Initialize Command","text":"<p>The <code>initialize</code> command is used to create the configuration yaml file and optionally set the connection string. The configuration file has many options to configure the generated output.  See the configuration file documentation for more details.</p> <p>The following command will create an initial <code>generation.yaml</code> configuration file as well as setting a user secret to store the connection string.</p> <pre><code>efg initialize -c &lt;ConnectionString&gt;\n</code></pre> <p>Replace <code>&lt;ConnectionString&gt;</code> with a valid database connection string.</p> <p>When a <code>generation.yaml</code> configuration file exists, you can run <code>efg generate</code> in the same directory to generate the source using that configuration file.</p>"},{"location":"readme/#generate-command","title":"Generate Command","text":"<p>Entity Framework Core Generator (efg) creates source code files from a database schema. To generate the files with the <code>generation.yaml</code> configuration, run the following</p> <pre><code>efg generate\n</code></pre>"},{"location":"readme/#regeneration","title":"Regeneration","text":"<p>Entity Framework Core Generator supports safe regeneration via region replacement and source code parsing.  A typical workflow for a project requires many database changes and updates.  Being able to regenerate the entities and associated files is a huge time saver.</p>"},{"location":"readme/#region-replacement","title":"Region Replacement","text":"<p>All the templates output a region on first generation.  On future regeneration, only the regions are replaced.  This keeps any other changes you've made to the source file.</p>"},{"location":"readme/#source-parsing","title":"Source Parsing","text":"<p>In order to capture and preserve Entity, Property and DbContext renames, the <code>generate</code> command parses any existing mapping and DbContext class to capture how things are named.  This allows you to use the full extend of Visual Studio's refactoring tools to rename things as you like.  Then, when regenerating, those changes won't be lost.</p>"},{"location":"readme/#database-providers","title":"Database Providers","text":"<p>Entity Framework Core Generator supports the following databases.</p> <ul> <li>SQL Server</li> <li>PostgreSQL</li> <li>MySQL</li> <li>Sqlite</li> <li>Oracle</li> </ul> <p>The provider can be set via command line or via the configuration file.</p>"},{"location":"readme/#view-models","title":"View Models","text":"<p>Entity Framework Core Generator supports generating Read, Create and Update view models from an entity.  Many projects rely on view models to shape data.  The model templates can be used to quickly get the basic view models created.  The model templates also support regeneration so any database change can easily be sync'd to the view models.  </p>"},{"location":"regeneration/","title":"Regeneration","text":"<p>Entity Framework Core Generator supports safe regeneration via region replacement and source code parsing.  A typical workflow for a project requires many database changes and updates.  Being able to regenerate the entities and associated files is a huge time saver. </p>"},{"location":"regeneration/#region-replacement","title":"Region Replacement","text":"<p>All the templates output a region on first generation.  On future regeneration, only the regions are replaced.  This keeps any other changes you've made the the source file.</p> <p>Example of a generated entity class</p> <pre><code>public partial class Status\n{\n    public Status()\n    {\n        #region Generated Constructor\n        Tasks = new HashSet&lt;Task&gt;();\n        #endregion\n    }\n\n    #region Generated Properties\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n\n    public string Description { get; set; }\n\n    public int DisplayOrder { get; set; }\n\n    public bool IsActive { get; set; }\n\n    public DateTimeOffset Created { get; set; }\n\n    public string CreatedBy { get; set; }\n\n    public DateTimeOffset Updated { get; set; }\n\n    public string UpdatedBy { get; set; }\n\n    public Byte[] RowVersion { get; set; }\n    #endregion\n\n    #region Generated Relationships\n    public virtual ICollection&lt;Task&gt; Tasks { get; set; }\n    #endregion\n}\n</code></pre> <p>When the <code>generate</code> command is re-run, the <code>Generated Constructor</code>, <code>Generated Properties</code> and <code>Generated Relationships</code> regions will be replace with the current output of the template.  Any other changes outside those regions will be safe.</p>"},{"location":"regeneration/#source-parsing","title":"Source Parsing","text":"<p>In order to capture and preserve Entity, Property and DbContext renames, the <code>generate</code> command parses any existing mapping and DbContext class to capture how things are named.  This allows you to use the full extend of Visual Studio's refactoring tools to rename things as you like.  Then, when regenerating, those changes won't be lost.</p>"},{"location":"scripts/","title":"Script Templates","text":"<p>Entity Framework Core Generator supports external csx script templates.  Script templates allow you to create custom templates to generate code based on the database model.</p>"},{"location":"scripts/#script-global-variables","title":"Script Global Variables","text":"<p>The script execution context contains the following global variables</p>"},{"location":"scripts/#generatoroptions","title":"GeneratorOptions","text":"<p>The generator options containing all the setting for the generator.</p>"},{"location":"scripts/#templateoptions","title":"TemplateOptions","text":"<p>Options for the current template loaded from the overall generator options</p>"},{"location":"scripts/#codebuilder","title":"CodeBuilder","text":"<p>A string builder that supports indentation for writing code</p>"},{"location":"scripts/#script-types","title":"Script Types","text":""},{"location":"scripts/#context-script-template","title":"Context Script Template","text":"<p>Context script templates have a global variable of <code>EntityContext</code> that contains the full database model.  Use this script type to generate something that applies to the full model.</p>"},{"location":"scripts/#entity-script-template","title":"Entity Script Template","text":"<p>Entity script templates have a global variable of <code>Entity</code> that contains the current entity being generated.  Use this script type to generate something that applies to each entity.</p> <p>Example Entity Template</p> <pre><code>public string WriteCode()\n{\n    CodeBuilder.Clear();\n\n    CodeBuilder.Append(\"EntityClass: \").Append(Entity.EntityClass).AppendLine();\n    CodeBuilder.Append(\"EntityNamespace: '\").Append(Entity.EntityNamespace).AppendLine(\"'\");\n    CodeBuilder.Append(\"EntityBaseClass: \").Append(Entity.EntityBaseClass).AppendLine();\n\n    CodeBuilder.Append(\"ContextProperty: \").Append(Entity.ContextProperty).AppendLine();\n\n    CodeBuilder.Append(\"TableSchema: '\").Append(Entity.TableSchema).AppendLine(\"'\");\n    CodeBuilder.Append(\"TableName: '\").Append(Entity.TableName).AppendLine(\"'\");\n\n\n    CodeBuilder.Append(\"MappingClass: \").Append(Entity.MappingClass).AppendLine();\n    CodeBuilder.Append(\"MappingNamespace: '\").Append(Entity.MappingNamespace).AppendLine(\"'\");\n\n    CodeBuilder.Append(\"MapperClass: \").Append(Entity.MapperClass).AppendLine();\n    CodeBuilder.Append(\"MapperNamespace: '\").Append(Entity.MapperClass).AppendLine(\"'\");\n    CodeBuilder.Append(\"MapperBaseClass: \").Append(Entity.MapperBaseClass).AppendLine();\n\n    CodeBuilder.Append(\"IsView: \").Append(Entity.IsView).AppendLine();\n\n    CodeBuilder.Append(\"Properties:\").AppendLine();\n    using (CodeBuilder.Indent())\n        GenerateProperties();\n\n    return CodeBuilder.ToString();\n}\n\nprivate void GenerateProperties()\n{\n    foreach (var property in Entity.Properties)\n    {\n        CodeBuilder.Append(\"- PropertyName: \").Append(property.PropertyName).AppendLine();\n        CodeBuilder.Append(\"  ColumnName: '\").Append(property.ColumnName).AppendLine(\"'\");\n        CodeBuilder.Append(\"  StoreType: \").Append(property.StoreType).AppendLine();\n        CodeBuilder.Append(\"  NativeType: '\").Append(property.NativeType).AppendLine(\"'\");\n        CodeBuilder.Append(\"  DataType: \").Append(property.DataType).AppendLine();\n        CodeBuilder.Append(\"  SystemType: \").Append(property.SystemType.Name).AppendLine();\n\n        if (property.Size != null)\n            CodeBuilder.Append(\"  Size: \").Append(property.Size).AppendLine();\n\n        if (property.Default != null)\n            CodeBuilder.Append(\"  Default: '\").Append(property.Default).AppendLine(\"'\");\n\n        if (property.ValueGenerated != null)\n            CodeBuilder.Append(\"  ValueGenerated: \").Append(property.ValueGenerated).AppendLine();\n\n        if (property.IsNullable != null)\n            CodeBuilder.Append(\"  IsNullable: \").Append(property.IsNullable).AppendLine();\n\n        if (property.IsPrimaryKey != null)\n            CodeBuilder.Append(\"  IsPrimaryKey: \").Append(property.IsPrimaryKey).AppendLine();\n\n        if (property.IsForeignKey != null)\n            CodeBuilder.Append(\"  IsForeignKey: \").Append(property.IsForeignKey).AppendLine();\n\n        if (property.IsReadOnly != null)\n            CodeBuilder.Append(\"  IsReadOnly: \").Append(property.IsReadOnly).AppendLine();\n\n        if (property.IsRowVersion != null)\n            CodeBuilder.Append(\"  IsRowVersion: \").Append(property.IsRowVersion).AppendLine();\n\n        if (property.IsUnique != null)\n            CodeBuilder.Append(\"  IsUnique: \").Append(property.IsUnique).AppendLine();\n    }\n}\n\n// run script\nWriteCode()\n</code></pre>"},{"location":"scripts/#model-script-template","title":"Model Script Template","text":"<p>Model script templates have a global variable of <code>Model</code> that contains the current model being generated.  Use this script type to generate something that applies to each model.</p> <p>Example Model Template</p> <pre><code>public string WriteCode()\n{\n    CodeBuilder.Clear();\n\n    CodeBuilder.Append(\"ModelClass: \").Append(Model.ModelClass).AppendLine();\n    CodeBuilder.Append(\"ModelType: \").Append(Model.ModelType).AppendLine();\n    CodeBuilder.Append(\"ModelNamespace: '\").Append(Model.ModelNamespace).AppendLine(\"'\");\n    CodeBuilder.Append(\"ModelBaseClass: \").Append(Model.ModelBaseClass).AppendLine();\n    CodeBuilder.Append(\"ValidatorNamespace: '\").Append(Model.ValidatorNamespace).AppendLine(\"'\");\n    CodeBuilder.Append(\"ValidatorClass: \").Append(Model.ValidatorClass).AppendLine();\n    CodeBuilder.Append(\"ValidatorBaseClass: \").Append(Model.ValidatorBaseClass).AppendLine();\n\n    CodeBuilder.Append(\"Properties:\").AppendLine();\n    using (CodeBuilder.Indent())\n        GenerateProperties();\n\n    return CodeBuilder.ToString();\n}\n\nprivate void GenerateProperties()\n{\n    foreach (var property in Model.Properties)\n    {\n        CodeBuilder.Append(\"- PropertyName: \").Append(property.PropertyName).AppendLine();\n        CodeBuilder.Append(\"  ColumnName: '\").Append(property.ColumnName).AppendLine(\"'\");\n        CodeBuilder.Append(\"  StoreType: \").Append(property.StoreType).AppendLine();\n        CodeBuilder.Append(\"  NativeType: '\").Append(property.NativeType).AppendLine(\"'\");\n        CodeBuilder.Append(\"  DataType: \").Append(property.DataType).AppendLine();\n        CodeBuilder.Append(\"  SystemType: \").Append(property.SystemType.Name).AppendLine();\n\n        if (property.Size != null)\n            CodeBuilder.Append(\"  Size: \").Append(property.Size).AppendLine();\n\n        if (property.Default != null)\n            CodeBuilder.Append(\"  Default: '\").Append(property.Default).AppendLine(\"'\");\n\n        if (property.ValueGenerated != null)\n            CodeBuilder.Append(\"  ValueGenerated: \").Append(property.ValueGenerated).AppendLine();\n\n        if (property.IsNullable != null)\n            CodeBuilder.Append(\"  IsNullable: \").Append(property.IsNullable).AppendLine();\n\n        if (property.IsPrimaryKey != null)\n            CodeBuilder.Append(\"  IsPrimaryKey: \").Append(property.IsPrimaryKey).AppendLine();\n\n        if (property.IsForeignKey != null)\n            CodeBuilder.Append(\"  IsForeignKey: \").Append(property.IsForeignKey).AppendLine();\n\n        if (property.IsReadOnly != null)\n            CodeBuilder.Append(\"  IsReadOnly: \").Append(property.IsReadOnly).AppendLine();\n\n        if (property.IsRowVersion != null)\n            CodeBuilder.Append(\"  IsRowVersion: \").Append(property.IsRowVersion).AppendLine();\n\n        if (property.IsUnique != null)\n            CodeBuilder.Append(\"  IsUnique: \").Append(property.IsUnique).AppendLine();\n    }\n}\n\n// run script\nWriteCode()\n</code></pre>"},{"location":"scripts/#configuration","title":"Configuration","text":"<p>Example configuration</p> <pre><code>script:\n  entity:\n    - templatePath: '.\\Templates\\entity-yaml.csx'\n      fileName: '{Entity.Name}.yml'\n      directory: '{Project.Directory}\\Yaml\\Entity'\n      overwrite: true\n  model:\n    - templatePath: '.\\Templates\\model-yaml.csx'\n      fileName: '{Model.Name}.yml'\n      directory: '{Project.Directory}\\Yaml\\Model'\n      overwrite: true\n</code></pre>"},{"location":"scripts/#templatepath","title":"TemplatePath","text":"<p>The file path to the script template. Variables Supported</p>"},{"location":"scripts/#filename","title":"FileName","text":"<p>The file name to save script output. Variables Supported</p>"},{"location":"scripts/#namespace","title":"Namespace","text":"<p>The namespace for the script template. Variables Supported</p>"},{"location":"scripts/#baseclass","title":"BaseClass","text":"<p>The base class for the script template.  Variables Supported</p>"},{"location":"scripts/#directory","title":"Directory","text":"<p>The directory location to write script template output. Variables Supported</p>"},{"location":"scripts/#overwrite","title":"Overwrite","text":"<p>Flag indicating whether to overwrite existing file. Default: <code>false</code></p>"},{"location":"variables/","title":"Configuration Variables","text":"<p>Entity Framework Core Generator supports context variables in the yaml configuration file.</p>"},{"location":"variables/#variable-syntax","title":"Variable syntax","text":"<p>To use the variable in the yaml file, wrap them with <code>{}</code> brackets.  Example <code>{Database.Name}</code></p>"},{"location":"variables/#common-variables","title":"Common Variables","text":"<p>The following are common variables to use in the configuration file</p>"},{"location":"variables/#database-name","title":"Database Name","text":"<p><code>{Database.Name}</code> is the name of the database used for generation</p>"},{"location":"variables/#project-namespace","title":"Project Namespace","text":"<p><code>{Project.Namespace}</code> The root namespace for the generated project files</p>"},{"location":"variables/#project-directory","title":"Project Directory","text":"<p><code>{Project.Directory}</code> The root directory for the files generated</p>"},{"location":"variables/#table-schema","title":"Table Schema","text":"<p><code>{Table.Schema}</code> is the name of the current table schema</p>"},{"location":"variables/#table-name","title":"Table Name","text":"<p><code>{Table.Name}</code> is the name of the current table</p>"},{"location":"variables/#entity-name","title":"Entity Name","text":"<p><code>{Entity.Name}</code> is the name of the current entity</p>"},{"location":"variables/#model-name","title":"Model Name","text":"<p><code>{Model.Name}</code> is the name of the current model</p>"},{"location":"variables/#examples","title":"Examples","text":"<p>Use the table schema to organize entities into folders</p> <pre><code>data:\n  context:\n    name: '{Database.Name}Context'\n    baseClass: DbContext\n    propertyNaming: Plural\n    namespace: '{Project.Namespace}.Data'\n    directory: '{Project.Directory}\\Data'\n  entity:\n    name: '{Table.Schema}{Table.Name}'\n    namespace: '{Project.Namespace}.Data.{Table.Schema}.Entities'\n    directory: '{Project.Directory}\\Data\\{Table.Schema}\\Entities'\n  mapping:\n    namespace: '{Project.Namespace}.Data.{Table.Schema}.Mapping'\n    directory: '{Project.Directory}\\Data\\{Table.Schema}\\Mapping'\n  query:\n    generate: true\n    indexPrefix: By\n    uniquePrefix: GetBy\n    namespace: '{Project.Namespace}.Data.{Table.Schema}.Queries'\n    directory: '{Project.Directory}\\Data\\{Table.Schema}\\Queries'\n</code></pre> <p>Use the entity name to sort domain models into folders</p> <pre><code>model:\n  shared:\n    namespace: '{Project.Namespace}.Domain.Models'\n    directory: '{Project.Directory}\\Domain\\{Entity.Name}\\Models'\n  read:\n    generate: true\n    name: '{Entity.Name}ReadModel'\n    baseClass: 'EntityReadModel'\n  create:\n    generate: true\n    name: '{Entity.Name}CreateModel'\n    baseClass: 'EntityCreateModel'\n  update:\n    generate: true\n    name: '{Entity.Name}UpdateModel'\n    baseClass: EntityUpdateModel\n  mapper:\n    generate: true\n    name: '{Entity.Name}Profile'\n    baseClass: Profile\n    namespace: '{Project.Namespace}.Domain.Mapping'\n    directory: '{Project.Directory}\\Domain\\{Entity.Name}\\Mapping'\n  validator:\n    generate: true\n    name: '{Model.Name}Validator'\n    baseClass: 'AbstractValidator&lt;{Model.Name}&gt;'\n    namespace: '{Project.Namespace}.Domain.Validation'\n    directory: '{Project.Directory}\\Domain\\{Entity.Name}\\Validation'\n</code></pre>"},{"location":"ef/dataContext/","title":"Data Context Template","text":"<p>The data context template outputs the Entity Framework <code>DbContext</code> class.</p>"},{"location":"ef/dataContext/#output","title":"Output","text":"<p>Sample generated class from this template.</p> <pre><code>public partial class TrackerContext : DbContext\n{\n    public TrackerContext(DbContextOptions&lt;TrackerContext&gt; options)\n        : base(options)\n    {\n    }\n\n    #region Generated Properties\n    public virtual DbSet&lt;Tracker.Core.Data.Entities.Audit&gt; Audits { get; set; }\n\n    public virtual DbSet&lt;Tracker.Core.Data.Entities.Priority&gt; Priorities { get; set; }\n\n    public virtual DbSet&lt;Tracker.Core.Data.Entities.Role&gt; Roles { get; set; }\n\n    public virtual DbSet&lt;Tracker.Core.Data.Entities.Status&gt; Statuses { get; set; }\n\n    public virtual DbSet&lt;Tracker.Core.Data.Entities.Task&gt; Tasks { get; set; }\n\n    public virtual DbSet&lt;Tracker.Core.Data.Entities.User&gt; Users { get; set; }\n\n    public virtual DbSet&lt;Tracker.Core.Data.Entities.TaskExtended&gt; TaskExtended { get; set; }\n\n    public virtual DbSet&lt;Tracker.Core.Data.Entities.UserLogin&gt; UserLogins { get; set; }\n\n    public virtual DbSet&lt;Tracker.Core.Data.Entities.UserRole&gt; UserRoles { get; set; }\n    #endregion\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        #region Generated Configuration\n        modelBuilder.ApplyConfiguration(new Tracker.Core.Data.Mapping.AuditMap());\n        modelBuilder.ApplyConfiguration(new Tracker.Core.Data.Mapping.PriorityMap());\n        modelBuilder.ApplyConfiguration(new Tracker.Core.Data.Mapping.RoleMap());\n        modelBuilder.ApplyConfiguration(new Tracker.Core.Data.Mapping.StatusMap());\n        modelBuilder.ApplyConfiguration(new Tracker.Core.Data.Mapping.TaskMap());\n        modelBuilder.ApplyConfiguration(new Tracker.Core.Data.Mapping.UserMap());\n        modelBuilder.ApplyConfiguration(new Tracker.Core.Data.Mapping.TaskExtendedMap());\n        modelBuilder.ApplyConfiguration(new Tracker.Core.Data.Mapping.UserLoginMap());\n        modelBuilder.ApplyConfiguration(new Tracker.Core.Data.Mapping.UserRoleMap());\n        #endregion\n    }\n}\n</code></pre>"},{"location":"ef/dataContext/#configuration","title":"Configuration","text":"<p>The data context template has the following configuration that can be set in the yaml configuration file.</p> <p>Example configuration</p> <pre><code>data:\n  context:\n    name: '{Database.Name}Context'\n    baseClass: DbContext\n    namespace: '{Project.Namespace}.Data'\n    directory: '{Project.Directory}\\Data'\n    propertyNaming: Plural\n</code></pre>"},{"location":"ef/dataContext/#name","title":"name","text":"<p>The class name the data context.  Variables Supported</p>"},{"location":"ef/dataContext/#baseclass","title":"baseClass","text":"<p>The base class to inherit from.  Default <code>DbContext</code> Variables Supported</p>"},{"location":"ef/dataContext/#namespace","title":"namespace","text":"<p>The namespace for the class. Variables Supported</p>"},{"location":"ef/dataContext/#directory","title":"directory","text":"<p>The location to write the source file. Variables Supported</p>"},{"location":"ef/dataContext/#propertynaming","title":"propertyNaming","text":"<p>Configuration on how to generate names for the DbSet properties on the data context.  Default: <code>Plural</code></p> <ul> <li>Preserve - Keep underlying entity name as property name</li> <li>Plural - Use the plural form of the entity name</li> <li>Suffix - Add 'DataSet' to the end of the entity name</li> </ul>"},{"location":"ef/dataContext/#document","title":"document","text":"<p>Include XML documentation for the generated class.  Default: <code>false</code></p>"},{"location":"ef/dataContext/#regeneration","title":"Regeneration","text":"<p>The data context template has two regions that are replaced on regeneration.</p>"},{"location":"ef/dataContext/#generated-properties","title":"Generated Properties","text":"<p>The <code>Generated Properties</code> region contains all the <code>DbSet</code> properties that can be used to query and save instances of an entity.</p> <p>Property rename is supported.  The rename will be discovered during the parsing phase of the source generation.</p>"},{"location":"ef/dataContext/#generated-configuration","title":"Generated Configuration","text":"<p>The <code>Generated Configuration</code> region configures the entity type mapping.  </p>"},{"location":"ef/entity/","title":"Entity Template","text":"<p>The entity class template. An entity is created for each table in the context.</p>"},{"location":"ef/entity/#output","title":"Output","text":"<p>Example of a generated entity class</p> <pre><code>public partial class Status\n{\n    public Status()\n    {\n        #region Generated Constructor\n        Tasks = new HashSet&lt;Task&gt;();\n        #endregion\n    }\n\n    #region Generated Properties\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n\n    public string Description { get; set; }\n\n    public int DisplayOrder { get; set; }\n\n    public bool IsActive { get; set; }\n\n    public DateTimeOffset Created { get; set; }\n\n    public string CreatedBy { get; set; }\n\n    public DateTimeOffset Updated { get; set; }\n\n    public string UpdatedBy { get; set; }\n\n    public Byte[] RowVersion { get; set; }\n    #endregion\n\n    #region Generated Relationships\n    public virtual ICollection&lt;Task&gt; Tasks { get; set; }\n    #endregion\n}\n</code></pre>"},{"location":"ef/entity/#configuration","title":"Configuration","text":"<p>The entity template has the following configuration that can be set in the yaml configuration file.</p> <p>Example configuration</p> <pre><code>data:\n  entity:\n    namespace: '{Project.Namespace}.Data.Entities'\n    directory: '{Project.Directory}\\Data\\Entities'\n    entityNaming: Singular\n    relationshipNaming: Plural\n    prefixWithSchemaName: false\n    renaming:\n      entities:\n        - ^(sp|tbl|udf|vw)_\n      properties:\n        - ^{Table.Name}(?=Id|Name)    \n</code></pre>"},{"location":"ef/entity/#name","title":"name","text":"<p>The class name of the entity.  Will be generated if null or empty.  Variables Supported</p>"},{"location":"ef/entity/#namespace","title":"namespace","text":"<p>The namespace for the class. Variables Supported</p>"},{"location":"ef/entity/#directory","title":"directory","text":"<p>The directory location to write the source file. Variables Supported</p>"},{"location":"ef/entity/#entitynaming","title":"entityNaming","text":"<p>Control how to generate entity class names from the table name. Default: <code>Singular</code></p> <ul> <li>Preserve - Keep table name as entity name</li> <li>Plural - Use the plural form of the table name</li> <li>Singular - Use the singular form of the table name</li> </ul>"},{"location":"ef/entity/#relationshipnaming","title":"relationshipNaming","text":"<p>Configuration on how to generate relationship property names. Default: <code>Plural</code></p> <ul> <li>Preserve - Keep underlying entity name as property name</li> <li>Plural - Use the plural form of the entity name</li> <li>Suffix - Add 'List' to the end of the entity name</li> </ul>"},{"location":"ef/entity/#prefixwithschemaname","title":"prefixWithSchemaName","text":"<p>Obsolete Use the name option for more flexibility.</p> <p>Control if class names should be generated with schema name prefixed eg. dbo.MyTable = DboMyTable. Default: <code>false</code></p>"},{"location":"ef/entity/#document","title":"document","text":"<p>Include XML documentation for the generated class. Default: <code>false</code></p>"},{"location":"ef/entity/#renaming","title":"renaming","text":"<p>Rename entities and properties with regular expressions</p>"},{"location":"ef/entity/#entities","title":"entities","text":"<p>list of regular expressions to clean entity names</p>"},{"location":"ef/entity/#properties","title":"properties","text":"<p>list of regular expressions to clean property names</p>"},{"location":"ef/entity/#regeneration","title":"Regeneration","text":"<p>The entity template has three regions that are replaced on regeneration.</p>"},{"location":"ef/entity/#generated-constructor","title":"Generated Constructor","text":"<p>The <code>Generated Constructor</code> region initializes any relationship collection in the constructor.</p>"},{"location":"ef/entity/#generated-properties","title":"Generated Properties","text":"<p>The <code>Generated Properties</code> region contains all the properties that are mapped to columns for the entity.</p> <p>Property rename is supported. The rename will be discovered during the parsing phase of the source generation.</p>"},{"location":"ef/entity/#generated-relationships","title":"Generated Relationships","text":"<p>The <code>Generated Relationships</code> region contains all the relationship navigation properties.</p> <p>Property rename is supported. The rename will be discovered during the parsing phase of the source generation.</p>"},{"location":"ef/extensions/","title":"Query Extensions Template","text":"<p>Query Extension method template.  This template create an extension method for each key or index on a table.  </p>"},{"location":"ef/extensions/#output","title":"Output","text":"<p>Example of a generated query extension class</p> <pre><code>public static partial class TaskExtensions\n{\n    #region Generated Extensions\n    public static Task GetByKey(this IQueryable&lt;Task&gt; queryable, Guid id)\n    {\n        if (queryable is DbSet&lt;Task&gt; dbSet)\n            return dbSet.Find(id);\n\n        return queryable.FirstOrDefault(q =&gt; q.Id == id);\n    }\n\n    public static Task&lt;Task&gt; GetByKeyAsync(this IQueryable&lt;Task&gt; queryable, Guid id)\n    {\n        if (queryable is DbSet&lt;Task&gt; dbSet)\n            return dbSet.FindAsync(id);\n\n        return queryable.FirstOrDefaultAsync(q =&gt; q.Id == id);\n    }\n\n    public static IQueryable&lt;Task&gt; ByAssignedId(this IQueryable&lt;Task&gt; queryable, Guid? assignedId)\n    {\n        return queryable.Where(q =&gt; (q.AssignedId == assignedId || (assignedId == null &amp;&amp; q.AssignedId == null)));\n    }\n\n    public static IQueryable&lt;Task&gt; ByPriorityId(this IQueryable&lt;Task&gt; queryable, int? priorityId)\n    {\n        return queryable.Where(q =&gt; (q.PriorityId == priorityId || (priorityId == null &amp;&amp; q.PriorityId == null)));\n    }\n\n    public static IQueryable&lt;Task&gt; ByStatusId(this IQueryable&lt;Task&gt; queryable, int statusId)\n    {\n        return queryable.Where(q =&gt; q.StatusId == statusId);\n    }\n\n    #endregion\n}\n</code></pre>"},{"location":"ef/extensions/#configuration","title":"Configuration","text":"<p>The query extension class has the following configuration that can be set in the yaml configuration file.</p> <pre><code>data:\n  query:\n    generate: true\n    indexPrefix: By\n    uniquePrefix: GetBy\n    namespace: '{Project.Namespace}.Data.Queries'\n    directory: '{Project.Directory}\\Data\\Queries'\n</code></pre>"},{"location":"ef/extensions/#generate","title":"generate","text":"<p>Flag to enable generating the output for this template.  Default: <code>true</code></p>"},{"location":"ef/extensions/#namespace","title":"namespace","text":"<p>The namespace for the class. Variables Supported</p>"},{"location":"ef/extensions/#directory","title":"directory","text":"<p>The directory location to write the source file. Variables Supported</p>"},{"location":"ef/extensions/#indexprefix","title":"indexPrefix","text":"<p>Prefix for queries built from an index</p>"},{"location":"ef/extensions/#uniqueprefix","title":"uniquePrefix","text":"<p>Prefix for queries built from unique indexes</p>"},{"location":"ef/extensions/#document","title":"document","text":"<p>Include XML documentation for the generated class.  Default: <code>false</code></p>"},{"location":"ef/extensions/#regeneration","title":"Regeneration","text":"<p>The query extension template has one region that is replaced on regeneration.</p>"},{"location":"ef/extensions/#generated-configuration","title":"Generated Configuration","text":"<p>The <code>Generated Configure</code> region configures the entity type mapping.  </p>"},{"location":"ef/mapping/","title":"Entity Mapping Template","text":"<p>The entity mapping class template.  An entity mapping class is created for each table in the context.  The class is used to map table to entity and column to property using the Entity Framework fluent syntax</p>"},{"location":"ef/mapping/#output","title":"Output","text":"<p>Example of a generated entity mapping class</p> <pre><code>public partial class TaskMap\n    : IEntityTypeConfiguration&lt;Task&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Task&gt; builder)\n    {\n        #region Generated Configure\n        // table\n        builder.ToTable(\"Task\", \"dbo\");\n\n        // key\n        builder.HasKey(t =&gt; t.Id);\n\n        // properties\n        builder.Property(t =&gt; t.Id)\n            .IsRequired()\n            .HasColumnName(\"Id\")\n            .HasColumnType(\"uniqueidentifier\")\n            .HasDefaultValueSql(\"(newsequentialid())\");\n\n        builder.Property(t =&gt; t.StatusId)\n            .IsRequired()\n            .HasColumnName(\"StatusId\")\n            .HasColumnType(\"int\");\n\n        builder.Property(t =&gt; t.PriorityId)\n            .HasColumnName(\"PriorityId\")\n            .HasColumnType(\"int\");\n\n        builder.Property(t =&gt; t.Title)\n            .IsRequired()\n            .HasColumnName(\"Title\")\n            .HasColumnType(\"nvarchar(255)\")\n            .HasMaxLength(255);\n\n        builder.Property(t =&gt; t.Description)\n            .HasColumnName(\"Description\")\n            .HasColumnType(\"nvarchar(max)\");\n\n        builder.Property(t =&gt; t.StartDate)\n            .HasColumnName(\"StartDate\")\n            .HasColumnType(\"datetimeoffset\");\n\n        builder.Property(t =&gt; t.DueDate)\n            .HasColumnName(\"DueDate\")\n            .HasColumnType(\"datetimeoffset\");\n\n        builder.Property(t =&gt; t.CompleteDate)\n            .HasColumnName(\"CompleteDate\")\n            .HasColumnType(\"datetimeoffset\");\n\n        builder.Property(t =&gt; t.AssignedId)\n            .HasColumnName(\"AssignedId\")\n            .HasColumnType(\"uniqueidentifier\");\n\n        builder.Property(t =&gt; t.Created)\n            .IsRequired()\n            .HasColumnName(\"Created\")\n            .HasColumnType(\"datetimeoffset\")\n            .HasDefaultValueSql(\"(sysutcdatetime())\");\n\n        builder.Property(t =&gt; t.CreatedBy)\n            .HasColumnName(\"CreatedBy\")\n            .HasColumnType(\"nvarchar(100)\")\n            .HasMaxLength(100);\n\n        builder.Property(t =&gt; t.Updated)\n            .IsRequired()\n            .HasColumnName(\"Updated\")\n            .HasColumnType(\"datetimeoffset\")\n            .HasDefaultValueSql(\"(sysutcdatetime())\");\n\n        builder.Property(t =&gt; t.UpdatedBy)\n            .HasColumnName(\"UpdatedBy\")\n            .HasColumnType(\"nvarchar(100)\")\n            .HasMaxLength(100);\n\n        builder.Property(t =&gt; t.RowVersion)\n            .IsRequired()\n            .IsRowVersion()\n            .HasColumnName(\"RowVersion\")\n            .HasColumnType(\"rowversion\")\n            .ValueGeneratedOnAddOrUpdate();\n\n        // relationships\n        builder.HasOne(t =&gt; t.Priority)\n            .WithMany(t =&gt; t.Tasks)\n            .HasForeignKey(d =&gt; d.PriorityId)\n            .HasConstraintName(\"FK_Task_Priority_PriorityId\");\n\n        builder.HasOne(t =&gt; t.Status)\n            .WithMany(t =&gt; t.Tasks)\n            .HasForeignKey(d =&gt; d.StatusId)\n            .HasConstraintName(\"FK_Task_Status_StatusId\");\n\n        builder.HasOne(t =&gt; t.AssignedUser)\n            .WithMany(t =&gt; t.AssignedTasks)\n            .HasForeignKey(d =&gt; d.AssignedId)\n            .HasConstraintName(\"FK_Task_User_AssignedId\");\n\n        #endregion\n    }\n}\n</code></pre>"},{"location":"ef/mapping/#configuration","title":"Configuration","text":"<p>The entity template has the following configuration that can be set in the yaml configuration file.</p> <pre><code>data:\n  mapping:\n    namespace: '{Project.Namespace}.Data.Mapping'\n    directory: '{Project.Directory}\\Data\\Mapping'\n</code></pre>"},{"location":"ef/mapping/#namespace","title":"namespace","text":"<p>The namespace for the class. Variables Supported</p>"},{"location":"ef/mapping/#directory","title":"directory","text":"<p>The directory location to write the source file. Variables Supported</p>"},{"location":"ef/mapping/#document","title":"document","text":"<p>Include XML documentation for the generated class.  Default: <code>false</code></p>"},{"location":"ef/mapping/#regeneration","title":"Regeneration","text":"<p>The entity template has one region that is replaced on regeneration.</p>"},{"location":"ef/mapping/#generated-configuration","title":"Generated Configuration","text":"<p>The <code>Generated Configure</code> region configures the entity type mapping.  </p>"},{"location":"md/create/","title":"Create Model Template","text":"<p>The create model template generates a create model from an entity.  The create model is used to shape creating new entity instances.</p>"},{"location":"md/create/#output","title":"Output","text":"<p>Example of a generated model class</p> <pre><code>public partial class StatusCreateModel\n    : EntityCreateModel\n{\n    #region Generated Properties\n    public string Name { get; set; }\n\n    public string Description { get; set; }\n\n    public int DisplayOrder { get; set; }\n\n    public bool IsActive { get; set; }\n    #endregion\n}\n</code></pre>"},{"location":"md/create/#configuration","title":"Configuration","text":"<p>The create model template has the following configuration that can be set in the yaml configuration file.</p> <p>Configuration values set at the this level override the shared model configuration.</p> <p>Example configuration</p> <pre><code>model:\n  create:\n    generate: true\n    name: '{Entity.Name}CreateModel'\n    baseClass: EntityCreateModel\n    namespace: '{Project.Namespace}.Domain.Models'\n    directory: '{Project.Directory}\\Domain\\Models'\n    exclude:\n      entities:\n        - 'EmailDelivery'\n        - 'UserLogin'\n      properties:\n        - 'User\\.PasswordHash$'\n        - 'User\\.ResetHash$'\n</code></pre>"},{"location":"md/create/#generate","title":"generate","text":"<p>Flag to enable generating the output for this template.  Default: <code>true</code></p>"},{"location":"md/create/#name","title":"name","text":"<p>The model class name. Default: <code>{Entity.Name}CreateModel</code> Variables Supported</p>"},{"location":"md/create/#baseclass","title":"baseClass","text":"<p>The base class to inherit from.  Variables Supported</p>"},{"location":"md/create/#namespace","title":"namespace","text":"<p>The namespace for the model class. Variables Supported</p>"},{"location":"md/create/#directory","title":"directory","text":"<p>The directory location to write the source file. Variables Supported</p>"},{"location":"md/create/#document","title":"document","text":"<p>Include XML documentation for the generated model class.  Default: <code>false</code></p>"},{"location":"md/create/#exclude","title":"exclude","text":"<p>A list regular expressions for entities and properties to exclude in the model.</p>"},{"location":"md/create/#entities","title":"entities","text":"<p>Exclude all entities that match any of the listed regular expressions.  </p>"},{"location":"md/create/#properties","title":"properties","text":"<p>Exclude all properties that match any of the listed regular expressions.  The value to match contains the parent entity the property belongs too, <code>Entity.Property</code>.</p>"},{"location":"md/create/#regeneration","title":"Regeneration","text":"<p>The model template has one region that is replaced on regeneration.</p>"},{"location":"md/create/#generated-properties","title":"Generated Properties","text":"<p>The <code>Generated Properties</code> region contains all the properties for the model that are mapped to an entity.</p>"},{"location":"md/mapper/","title":"Model Object Mapper Template","text":"<p>Create AutoMapper profiles to map entity to models.  Requires nuget package <code>AutoMapper</code>.</p>"},{"location":"md/mapper/#output","title":"Output","text":"<p>Example of a mapper profile class</p> <pre><code>public partial class StatusProfile\n    : Profile\n{\n    public StatusProfile()\n    {\n        CreateMap&lt;Status, StatusReadModel&gt;();\n        CreateMap&lt;StatusCreateModel, Status&gt;();\n        CreateMap&lt;StatusUpdateModel, Status&gt;();\n    }\n}\n</code></pre>"},{"location":"md/mapper/#configuration","title":"Configuration","text":"<p>The mapper template has the following configuration that can be set in the yaml configuration file.</p> <p>Example configuration</p> <pre><code>model:\n  mapper:\n    generate: true\n    name: '{Entity.Name}Profile'\n    baseClass: Profile\n    namespace: '{Project.Namespace}.Domain.Mapping'\n    directory: '{Project.Directory}\\Domain\\Mapping'\n</code></pre>"},{"location":"md/mapper/#generate","title":"generate","text":"<p>Flag to enable generating the output for this template.  Default: <code>true</code></p>"},{"location":"md/mapper/#name","title":"name","text":"<p>The mapper class name. Default: <code>{Entity.Name}Profile</code> Variables Supported</p>"},{"location":"md/mapper/#baseclass","title":"baseClass","text":"<p>The base class to inherit from. Default: <code>Profile</code> Variables Supported</p>"},{"location":"md/mapper/#namespace","title":"namespace","text":"<p>The namespace for the mapper class. Variables Supported</p>"},{"location":"md/mapper/#directory","title":"directory","text":"<p>The directory location to write the source file. Variables Supported</p>"},{"location":"md/mapper/#document","title":"document","text":"<p>Include XML documentation for the generated mapper class.  Default: <code>false</code></p>"},{"location":"md/mapper/#regeneration","title":"Regeneration","text":"<p>The mapper template does not support regeneration.  The mapper class will only be created if one doesn't exist for an entity.</p>"},{"location":"md/read/","title":"Read Model Template","text":"<p>The read model template generates a read view model from an entity.  The read view model is used to shape query results.</p>"},{"location":"md/read/#output","title":"Output","text":"<p>Example of a generated model class</p> <pre><code>public partial class StatusReadModel\n    : EntityReadModel\n{\n    #region Generated Properties\n    public string Name { get; set; }\n\n    public string Description { get; set; }\n\n    public int DisplayOrder { get; set; }\n\n    public bool IsActive { get; set; }\n    #endregion\n}\n</code></pre>"},{"location":"md/read/#configuration","title":"Configuration","text":"<p>The read model template has the following configuration that can be set in the yaml configuration file.</p> <p>Configuration values set at the this level override the shared model configuration.</p> <p>Example configuration</p> <pre><code>model:\n  read:\n    generate: true\n    name: '{Entity.Name}ReadModel'\n    baseClass: EntityReadModel\n    namespace: '{Project.Namespace}.Domain.Models'\n    directory: '{Project.Directory}\\Domain\\Models'\n    exclude:\n      entities:\n        - 'Migrations'\n      properties:\n        - 'User\\.PasswordHash$'\n        - 'User\\.ResetHash$'\n</code></pre>"},{"location":"md/read/#generate","title":"generate","text":"<p>Flag to enable generating the output for this template.  Default: <code>true</code></p>"},{"location":"md/read/#name","title":"name","text":"<p>The model class name. Default: <code>{Entity.Name}ReadModel</code> Variables Supported</p>"},{"location":"md/read/#baseclass","title":"baseClass","text":"<p>The base class to inherit from.  Variables Supported</p>"},{"location":"md/read/#namespace","title":"namespace","text":"<p>The namespace for the model class. Variables Supported</p>"},{"location":"md/read/#directory","title":"directory","text":"<p>The directory location to write the source file. Variables Supported</p>"},{"location":"md/read/#document","title":"document","text":"<p>Include XML documentation for the generated model class.  Default: <code>false</code></p>"},{"location":"md/read/#exclude","title":"exclude","text":"<p>A list regular expressions for entities and properties to exclude in the model.</p>"},{"location":"md/read/#entities","title":"entities","text":"<p>Exclude all entities that match any of the listed regular expressions.  </p>"},{"location":"md/read/#properties","title":"properties","text":"<p>Exclude all properties that match any of the listed regular expressions.  The value to match contains the parent entity the property belongs too, <code>Entity.Property</code>.</p>"},{"location":"md/read/#regeneration","title":"Regeneration","text":"<p>The model template has one region that is replaced on regeneration.</p>"},{"location":"md/read/#generated-properties","title":"Generated Properties","text":"<p>The <code>Generated Properties</code> region contains all the properties for the model that are mapped to an entity.</p>"},{"location":"md/shared/","title":"Shared Model Template","text":"<p>The Read, Create and Update model templates share the following configuration.</p>"},{"location":"md/shared/#configuration","title":"Configuration","text":"<p>Shared configuration values are applied to all the model templates.</p> <p>Example configuration</p> <pre><code>model:\n  shared:\n    exclude:\n      entities:\n        - 'EmailDelivery'\n        - 'UserLogin'\n      properties:\n        - 'User\\.PasswordHash$'\n        - 'User\\.ResetHash$'\n</code></pre>"},{"location":"md/shared/#namespace","title":"namespace","text":"<p>The namespace for the model class. Variables Supported</p>"},{"location":"md/shared/#directory","title":"directory","text":"<p>The directory location to write the source file. Variables Supported</p>"},{"location":"md/shared/#exclude","title":"exclude","text":"<p>The exclude configuration is a list regular expressions for entities and properties to exclude in the model.</p>"},{"location":"md/shared/#entities","title":"entities","text":"<p>Exclude all entities that match any of the listed regular expressions.  </p>"},{"location":"md/shared/#properties","title":"properties","text":"<p>Exclude all properties that match any of the listed regular expressions.  The value to match contains the parent entity the property belongs too, <code>Entity.Property</code>.</p>"},{"location":"md/update/","title":"Update Model Template","text":"<p>The update model template generates a update model from an entity.  The update model is used to shape updating of entity instances.</p>"},{"location":"md/update/#output","title":"Output","text":"<p>Example of a generated model class</p> <pre><code>public partial class StatusUpdateModel\n    : EntityUpdateModel\n{\n    #region Generated Properties\n    public string Name { get; set; }\n\n    public string Description { get; set; }\n\n    public int DisplayOrder { get; set; }\n\n    public bool IsActive { get; set; }\n    #endregion\n}\n</code></pre>"},{"location":"md/update/#configuration","title":"Configuration","text":"<p>The update model template has the following configuration that can be set in the yaml configuration file.</p> <p>Configuration values set at the this level override the shared model configuration.</p> <p>Example configuration</p> <pre><code>model:\n  update:\n    generate: true\n    name: '{Entity.Name}UpdateModel'\n    baseClass: EntityUpdateModel\n    namespace: '{Project.Namespace}.Domain.Models'\n    directory: '{Project.Directory}\\Domain\\Models'\n    exclude:\n      entities:\n        - 'EmailDelivery'\n        - 'UserLogin'\n      properties:\n        - 'User\\.PasswordHash$'\n        - 'User\\.ResetHash$'\n</code></pre>"},{"location":"md/update/#generate","title":"generate","text":"<p>Flag to enable generating the output for this template.  Default: <code>true</code></p>"},{"location":"md/update/#name","title":"name","text":"<p>The model class name. Default: <code>{Entity.Name}UpdateModel</code> Variables Supported</p>"},{"location":"md/update/#baseclass","title":"baseClass","text":"<p>The base class to inherit from.  Variables Supported</p>"},{"location":"md/update/#namespace","title":"namespace","text":"<p>The namespace for the model class. Variables Supported</p>"},{"location":"md/update/#directory","title":"directory","text":"<p>The directory location to write the source file. Variables Supported</p>"},{"location":"md/update/#document","title":"document","text":"<p>Include XML documentation for the generated model class.  Default: <code>false</code></p>"},{"location":"md/update/#exclude","title":"exclude","text":"<p>A list regular expressions for entities and properties to exclude in the model.</p>"},{"location":"md/update/#entities","title":"entities","text":"<p>Exclude all entities that match any of the listed regular expressions.  </p>"},{"location":"md/update/#properties","title":"properties","text":"<p>Exclude all properties that match any of the listed regular expressions.  The value to match contains the parent entity the property belongs too, <code>Entity.Property</code>.</p>"},{"location":"md/update/#regeneration","title":"Regeneration","text":"<p>The model template has one region that is replaced on regeneration.</p>"},{"location":"md/update/#generated-properties","title":"Generated Properties","text":"<p>The <code>Generated Properties</code> region contains all the properties for the model that are mapped to an entity.</p>"},{"location":"md/validation/","title":"Model Validation Template","text":"<p>Create a FluentValidation class for the Create and Update models.  Requires nuget package <code>FluentValidation</code>.</p>"},{"location":"md/validation/#output","title":"Output","text":"<p>Example of a validation class</p> <pre><code>public partial class StatusUpdateModelValidator\n    : AbstractValidator&lt;StatusUpdateModel&gt;\n{\n    public StatusUpdateModelValidator()\n    {\n        #region Generated Constructor\n        RuleFor(p =&gt; p.Name).NotEmpty();\n        RuleFor(p =&gt; p.Name).MaximumLength(100);\n        RuleFor(p =&gt; p.Description).MaximumLength(255);\n        #endregion\n    }\n}\n</code></pre>"},{"location":"md/validation/#configuration","title":"Configuration","text":"<p>The validation template has the following configuration that can be set in the yaml configuration file.</p> <p>Example configuration</p> <pre><code>model:\n  validator:\n    generate: true\n    name: '{Model.Name}Validator'\n    baseClass: AbstractValidator&lt;{Model.Name}&gt;\n    namespace: '{Project.Namespace}.Domain.Validation'\n    directory: '{Project.Directory}\\Domain\\Validation'\n</code></pre>"},{"location":"md/validation/#generate","title":"generate","text":"<p>Flag to enable generating the output for this template.  Default: <code>true</code></p>"},{"location":"md/validation/#name","title":"name","text":"<p>The validation class name. Default: <code>{Model.Name}Validator</code> Variables Supported</p>"},{"location":"md/validation/#baseclass","title":"baseClass","text":"<p>The base class to inherit from. Default: <code>AbstractValidator&lt;{Model.Name}&gt;</code> Variables Supported</p>"},{"location":"md/validation/#namespace","title":"namespace","text":"<p>The namespace for the validation class. Variables Supported</p>"},{"location":"md/validation/#directory","title":"directory","text":"<p>The directory location to write the source file. Variables Supported</p>"},{"location":"md/validation/#document","title":"document","text":"<p>Include XML documentation for the generated validation class.  Default: <code>false</code></p>"},{"location":"md/validation/#regeneration","title":"Regeneration","text":"<p>The validation template has one region that is replaced on regeneration.</p>"},{"location":"md/validation/#generated-constructor","title":"Generated Constructor","text":"<p>The <code>Generated Constructor</code> region initializes any model rules that can be derived from the database context.</p>"}]}